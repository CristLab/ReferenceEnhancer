OverlapResolutions(genome_annotation, gene_overlaps, c("Rik$", "^Gm"))
IsolateIntergenicReads("test_bam.bam", "test_index.bam.bai")
GenerateGeneLocationBed(genome_annotation)
GenerateExtensionCandidates()
OptimizedAnnotationAssembler("test_genes.gtf", "test_overlapping_gene_list.csv", "gene_extension_candidates.csv", "test_gene_replacement.csv")
OptimizedAnnotationAssembler("test_genes.gtf", "test_overlapping_gene_list.csv", "gene_extension_candidates.csv", "test_gene_replacement.csv")
library(ReferenceEnhancer)
setwd("/Users/helen/Library/CloudStorage/OneDrive-Personal/Koostoo_Hallu")
genome_annotation <- LoadGtf("test_genes.gtf")
gene_overlaps <- IdentifyOverlappers(genome_annotation)
OverlapResolutions(genome_annotation, gene_overlaps, c("Rik$", "^Gm"))
IsolateIntergenicReads("test_bam.bam", "test_index.bam.bai")
GenerateGeneLocationBed(genome_annotation)
GenerateExtensionCandidates()
OptimizedAnnotationAssembler("test_genes.gtf", â€œtest_overlapping_gene_list.csv", "gene_extension_candidates.csv", "test_gene_replacement.csv")
OptimizedAnnotationAssembler("test_genes.gtf", "test_overlapping_gene_list.csv", "gene_extension_candidates.csv", "test_gene_replacement.csv")
git push
git config pull.ff only
library(ReferenceEnhancer)
library(ReferenceEnhancer)
library(referenceenhancer)
getwd()
setwd("/Users/helen/Desktop")
setwd("/Users/helen/Desktop/Overlap")
genome_annotation <- LoadGtf("test_genes.gtf")
?IdentifyOverlappers
library(ReferenceEnhancer)
getwd()
install.packages("devtools")
require(devtools)
library(ReferenceEnhancer)
install.packages("gdata")
install.packages("readr")
?IdentifyOverlappers
library(ReferenceEnhancer)
genome_annotation <- LoadGtf("test_genes.gtf")
library(ReferenceEnhancer)
?IdentifyOverlappers
?ReferenceEnhancer
??ReferenceEnhancer
library(ReferenceEnhancer)
pwd
getwd()
genome_annotation <- LoadGtf("test_genes.gtf")
genome_annotation <- LoadGtf(genes_gtf_path)
library(ReferenceEnhancer)
devtools::document()
library(ReferenceEnhancer)
genome_annotation <- LoadGtf("test_genes.gtf")
BiocManager::install("rtracklayer")
genome_annotation <- LoadGtf("test_genes.gtf")
gene_overlaps <- IdentifyOverlappers(genome_annotation)
OverlapResolutions(genome_annotation, gene_overlaps, c("Rik$", "^Gm"))
devtools::document()
IsolateIntergenicReads("test_bam.bam", "test_index.bam.bai")
?LoadGtf
?OptimizedAnnotationAssembler
??OptimizedAnnotationAssembler
library(ReferenceEnhancer)
getwd()
OptimizedAnnotationAssembler()
library(ReferenceEnhancer)
?OptimizedAnnotationAssembler
library(ReferenceEnhancer)
library(ReferenceEnhancer)
library(ReferenceEnhancer)
?OptimizedAnnotationAssembler
library(ReferenceEnhancer)
?OptimizedAnnotationAssembler
test = LoadGtf("test_genes.gtf")
test
dim(test)
exonic_gtf <- system.file("extdata", "test_genes.gtf", package = "ReferenceEnhancer")
genome_annotation <- LoadGtf("test_genes.gtf")
gene_overlaps <- IdentifyOverlappers(genome_annotation)
gene_extension <- GenerateExtensionCandidates()
OptimizedAnnotationAssembler(exonic_gtf, gene_overlaps, gene_extension, gene_replacement)
library(ReferenceEnhancer)
exonic_gtf <- system.file("extdata", "test_genes.gtf", package = "ReferenceEnhancer")
genome_annotation <- LoadGtf("test_genes.gtf")
genome_annotation <- LoadGtf("test_genes.gtf")
gene_extension <- GenerateExtensionCandidates()
read.table("results.txt", sep = "\t")
library(ReferenceEnhancer)
summary_data
exonic_gtf <- system.file("extdata", "test_genes.gtf", package = "ReferenceEnhancer")
genome_annotation <- LoadGtf("test_genes.gtf")
genome_annotation <- LoadGtf("test_genes.gtf")
gene_extension <- GenerateExtensionCandidates()
OptimizedAnnotationAssembler("./test_genes.gtf", "./overlapping_gene_list.csv", " gene_extension_candidates.csv", "./rename_genes.csv")
pwd
getwd()
OptimizedAnnotationAssembler("./test_genes.gtf", "./overlapping_gene_list.csv", " gene_extension_candidates.csv", "./rename_genes.csv")
OptimizedAnnotationAssembler("test_genes.gtf", "overlapping_gene_list.csv", " gene_extension_candidates.csv", "rename_genes.csv")
OptimizedAnnotationAssembler("./test_genes.gtf", "./overlapping_gene_list.csv", " gene_extension_candidates.csv", "./rename_genes.csv")
library(ReferenceEnhancer)
OptimizedAnnotationAssembler("./test_genes.gtf", "./overlapping_gene_list.csv", " gene_extension_candidates.csv", "./rename_genes.csv")
library(ReferenceEnhancer)
OptimizedAnnotationAssembler("./test_genes.gtf", "./overlapping_gene_list.csv", " gene_extension_candidates.csv", "./rename_genes.csv")
library(ReferenceEnhancer)
OptimizedAnnotationAssembler("./test_genes.gtf", "./overlapping_gene_list.csv", " gene_extension_candidates.csv", "./rename_genes.csv")
gene_overlaps
library(ReferenceEnhancer)
OptimizedAnnotationAssembler("./test_genes.gtf", "./overlapping_gene_list.csv", " gene_extension_candidates.csv", "./rename_genes.csv")
length(transcripts_to_delete)
library(ReferenceEnhancer)
OptimizedAnnotationAssembler("./test_genes.gtf", "./overlapping_gene_list.csv", " gene_extension_candidates.csv", "./rename_genes.csv")
getwd()
library(ReferenceEnhancer)
genome_annotation <- LoadGtf("test_genes.gtf")
gene_overlaps <- IdentifyOverlappers(genome_annotation)
OverlapResolutions(genome_annotation, gene_overlaps, c("^Gm", "Rik$"))
IsolateIntergenicReads("./input.bam", "./input.bam.bai")
IsolateIntergenicReads("test_bam.bam", "test_index.bam.bai")
IsolateIntergenicReads("test_bam.bam", "test_index.bam.bai")
IsolateIntergenicReads("test_bam.bam", "test_index.bam.bai")
library(ReferenceEnhancer)
genome_annotation <- LoadGtf("test_genes.gtf")
gene_overlaps <- IdentifyOverlappers(genome_annotation)
OverlapResolutions(genome_annotation, gene_overlaps, c("Rik$", "^Gm"))
IsolateIntergenicReads("test_bam.bam", "test_index.bam.bai")
library(ReferenceEnhancer)
genome_annotation <- LoadGtf("test_genes.gtf")
gene_overlaps <- IdentifyOverlappers(genome_annotation)
OverlapResolutions(genome_annotation, gene_overlaps, c("Rik$", "^Gm"))
IsolateIntergenicReads("test_bam.bam", "test_index.bam.bai")
GenerateGeneLocationBed(genome_annotation)
GenerateExtensionCandidates()
OptimizedAnnotationAssembler("test_genes.gtf", "test_overlapping_gene_list.csv", "gene_extension_candidates.csv", "test_gene_replacement.csv")
GenerateGeneLocationBed(genome_annotation, "/usr/bin/bedops")
GenerateGeneLocationBed(genome_annotation)
library(ReferenceEnhancer)
GenerateExtensionCandidates()
library(ReferenceEnhancer)
library(ReferenceEnhancer)
library(ReferenceEnhancer)
unoptimized_gtf <- "test_genes.gtf"
gene_overlaps <- "overlapping_gene_list.csv"
gene_extension <- "gene_extension_candidates.csv"
gene_replacement <- "test_gene_replacement.csv"
OptimizedAnnotationAssembler("test_genes.gtf", "overlapping_gene_list.csv", " gene_extension_candidates.csv", "rename_genes.csv")
unoptimized_gtf <- "test_genes.gtf"
gene_overlaps <- "test_overlapping_gene_list.csv"
gene_extension <- "./gene_extension_candidates.csv"
gene_replacement <- "test_gene_replacement.csv"
OptimizedAnnotationAssembler(unoptimized_gtf, gene_overlaps, gene_extension, gene_replacement)
library(ReferenceEnhancer)
?LoadGtf
?LoadGtf
library(ReferenceEnhancer)
?LoadGtf
?LoadGtf
library(ReferenceEnhancer)
?LoadGtf
library(ReferenceEnhancer)
?LoadGtf
library(ReferenceEnhancer)
?LoadGtf
library(ReferenceEnhancer)
?LoadGtf
library(ReferenceEnhancer)
?LoadGtf
library(ReferenceEnhancer)
?LoadGtf
library(ReferenceEnhancer)
?LoadGtf
genome_annotation <- LoadGtf("test_genes.gtf")
?IdentifyOverlappers
gene_overlaps <- IdentifyOverlappers(genome_annotation)
?OverlapResolutions
library(ReferenceEnhancer)
?OverlapResolutions
library(ReferenceEnhancer)
?OverlapResolutions
genome_annotation <- LoadGtf("test_genes.gtf")
gene_overlaps <- IdentifyOverlappers(genome_annotation)
OverlapResolutions(genome_annotation, gene_overlaps, c("Rik$", "^Gm"))
?IsolateIntergenicReads
IsolateIntergenicReads("test_bam.bam", "test_index.bam.bai", barcode_length = 26)
?GenerateGeneLocationBed
?GenerateExtensionCandidates
?OptimizedAnnotationAssembler
library(ReferenceEnhancer)
?LoadGtf
genome_annotation <- LoadGtf(unoptimized_annotation_path = "test_genes.gtf")
?IdentifyOverlappers
gene_overlaps <- IdentifyOverlappers(genome_annotation = genome_annotation)
?OverlapResolutions
OverlapResolutions(genome_annotation = genome_annotation, overlap_data = gene_overlaps, gene_pattern = c("Rik$", "^Gm"))
?IsolateIntergenicReads
IsolateIntergenicReads(bam_file_name = "test_bam.bam", index_file_name = "test_index.bam.bai", barcode_length = 26)
?GenerateGeneLocationBed
GenerateGeneLocationBed(genome_annotation = genome_annotation)
?GenerateExtensionCandidates
old_path <- Sys.getenv("PATH")
Sys.setenv(PATH = paste(old_path, "/Applications/bedtools2/bin", sep = ":"))
GenerateExtensionCandidates()
Sys.getenv("PATH")
genome_annotation <- LoadGtf(unoptimized_annotation_path = "test_genes.gtf")
gene_overlaps <- IdentifyOverlappers(genome_annotation = genome_annotation)
OverlapResolutions(genome_annotation = genome_annotation, overlap_data = gene_overlaps, gene_pattern = c("Rik$", "^Gm"))
IsolateIntergenicReads(bam_file_name = "test_bam.bam", index_file_name = "test_index.bam.bai", barcode_length = 26)
GenerateGeneLocationBed(genome_annotation = genome_annotation)
GenerateExtensionCandidates()
GenerateExtensionCandidates(bedtools_loc = "/opt/bedtools2/bin")
library(ReferenceEnhancer)
GenerateExtensionCandidates(bedtools_loc = "/opt/bedtools2/bin")
library(ReferenceEnhancer)
GenerateExtensionCandidates(bedtools_loc = "/opt/bedtools2/bin")
library(ReferenceEnhancer)
GenerateExtensionCandidates(bedtools_loc = "/opt/bedtools2/bin")
library(ReferenceEnhancer)
GenerateExtensionCandidates(bedtools_loc = "/opt/bedtools2/bin")
library(ReferenceEnhancer)
GenerateExtensionCandidates(bedtools_loc = "/opt/bedtools2/bin")
library(ReferenceEnhancer)
GenerateExtensionCandidates(bedtools_loc = "/opt/bedtools2/bin")
library(ReferenceEnhancer)
GenerateExtensionCandidates(bedtools_loc = "/opt/bedtools2/bin")
library(ReferenceEnhancer)
GenerateExtensionCandidates(bedtools_loc = "/opt/bedtools2/bin")
library(ReferenceEnhancer)
GenerateExtensionCandidates(bedtools_loc = "/opt/bedtools2/bin")
library(ReferenceEnhancer)
GenerateExtensionCandidates(bedtools_loc = "/opt/bedtools2/bin")
library(ReferenceEnhancer)
GenerateExtensionCandidates(bedtools_loc = "/opt/bedtools2/bin")
library(ReferenceEnhancer)
genome_annotation <- LoadGtf(unoptimized_annotation_path = "test_genes.gtf")
genome_annotation
gene_overlaps <- IdentifyOverlappers(genome_annotation = genome_annotation)
getwd()
setwd("/System/Applications")
library(ReferenceEnhancer)
getwd()
library(ReferenceEnhancer)
genome_annotation <- LoadGtf(unoptimized_annotation_path = "test_genes.gtf")
LoadGtf("test_genes.gtf")
?LoadGtf
library(ReferenceEnhancer)
genome_annotation <- LoadGtf(unoptimized_annotation_path = "test_genes.gtf")
?LoadGtf
gene_overlaps <- IdentifyOverlappers(genome_annotation = genome_annotation)
OverlapResolutions(genome_annotation = genome_annotation, overlap_data = gene_overlaps, gene_pattern = c("Rik$", "^Gm"))
IsolateIntergenicReads(bam_file_name = "test_bam.bam", index_file_name = "test_index.bam.bai", barcode_length = 26)
GenerateGeneLocationBed(genome_annotation = genome_annotation)
GenerateExtensionCandidates(bedtools_loc = "/opt/bedtools2/bin")
genome_annotation <- LoadGtf(unoptimized_annotation_path = "test_genes.gtf")
gene_overlaps <- IdentifyOverlappers(genome_annotation = genome_annotation)
OverlapResolutions(genome_annotation = genome_annotation, overlap_data = gene_overlaps, gene_pattern = c("Rik$", "^Gm"))
IsolateIntergenicReads(bam_file_name = "test_bam.bam", index_file_name = "test_index.bam.bai", barcode_length = 26)
library(ReferenceEnhancer)
IsolateIntergenicReads(bam_file_name = "test_bam.bam", index_file_name = "test_index.bam.bai", barcode_length = 26)
IsolateIntergenicReads(bam_file_name = "test_bam.bam", index_file_name = "test_index.bam.bai")
library(ReferenceEnhancer)
IsolateIntergenicReads(bam_file_name = "test_bam.bam", index_file_name = "test_index.bam.bai")
library(ReferenceEnhancer)
IsolateIntergenicReads(bam_file_name = "test_bam.bam", index_file_name = "test_index.bam.bai")
library(ReferenceEnhancer)
IsolateIntergenicReads(bam_file_name = "test_bam.bam", index_file_name = "test_index.bam.bai")
IsolateIntergenicReads(bam_file_name = "test_bam.bam", index_file_name = "test_index.bam.bai", barcode_length = 26)
library(ReferenceEnhancer)
IsolateIntergenicReads(bam_file_name = "test_bam.bam", index_file_name = "test_index.bam.bai", barcode_length = 26)
GenerateGeneLocationBed(genome_annotation = genome_annotation)
GenerateExtensionCandidates(bedtools_loc = "/opt/bedtools2/bin")
old_path <- Sys.getenv("PATH")
Sys.getenv("PATH")
library(ReferenceEnhancer)
genome_annotation <- LoadGtf(unoptimized_annotation_path = "test_genes.gtf")
gene_overlaps <- IdentifyOverlappers(genome_annotation = genome_annotation)
OverlapResolutions(genome_annotation = genome_annotation, overlap_data = gene_overlaps, gene_pattern = c("Rik$", "^Gm"))
IsolateIntergenicReads(bam_file_name = "test_bam.bam", index_file_name = "test_index.bam.bai", barcode_length = 26)
GenerateGeneLocationBed(genome_annotation = genome_annotation)
GenerateExtensionCandidates(bedtools_loc = "/opt/bedtools2/bin")
old_path <- Sys.getenv("PATH")
Sys.setenv(PATH = paste(old_path, "/Applications/bedtools2/bin", sep = ":"))
GenerateExtensionCandidates()
GenerateExtensionCandidates(bedtools_loc = "/opt/bedtools2/bin")
library(ReferenceEnhancer)
GenerateExtensionCandidates(bedtools_loc = "/opt/bedtools2/bin")
GenerateExtensionCandidates()
Sys.getenv("PATH")
?GenerateExtensionCandidates
library(ReferenceEnhancer)
?GenerateExtensionCandidates
genome_annotation <- LoadGtf(unoptimized_annotation_path = "test_genes.gtf")
gene_overlaps <- IdentifyOverlappers(genome_annotation = genome_annotation)
OverlapResolutions(genome_annotation = genome_annotation, overlap_data = gene_overlaps, gene_pattern = c("Rik$", "^Gm"))
IsolateIntergenicReads(bam_file_name = "test_bam.bam", index_file_name = "test_index.bam.bai", barcode_length = 26)
GenerateGeneLocationBed(genome_annotation = genome_annotation)
Sys.getenv("PATH")
GenerateExtensionCandidates()
library(ReferenceEnhancer)
genome_annotation <- LoadGtf(unoptimized_annotation_path = "test_genes.gtf")
gene_overlaps <- IdentifyOverlappers(genome_annotation = genome_annotation)
OverlapResolutions(genome_annotation = genome_annotation, overlap_data = gene_overlaps, gene_pattern = c("Rik$", "^Gm"))
IsolateIntergenicReads(bam_file_name = "test_bam.bam", index_file_name = "test_index.bam.bai", barcode_length = 26)
GenerateGeneLocationBed(genome_annotation = genome_annotation)
Sys.getenv("PATH")
GenerateExtensionCandidates()
Sys.getenv("PATH")
GenerateExtensionCandidates(bedtools_loc = "/opt/bedtools2/bin")
Sys.getenv("PATH")
Sys.getenv("PATH")
whereis bedtools
library(ReferenceEnhancer)
genome_annotation <- LoadGtf(unoptimized_annotation_path = "test_genes.gtf")
gene_overlaps <- IdentifyOverlappers(genome_annotation = genome_annotation)
OverlapResolutions(genome_annotation = genome_annotation, overlap_data = gene_overlaps, gene_pattern = c("Rik$", "^Gm"))
IsolateIntergenicReads(bam_file_name = "test_bam.bam", index_file_name = "test_index.bam.bai", barcode_length = 26)
GenerateGeneLocationBed(genome_annotation = genome_annotation)
GenerateExtensionCandidates()
Sys.getenv("PATH")
GenerateExtensionCandidates("/opt/homebrew/bin/bedtools")
Sys.getenv("PATH")
system("whereis bedtools")
library(ReferenceEnhancer)
GenerateExtensionCandidates()
GenerateExtensionCandidates()
library(ReferenceEnhancer)
library(ReferenceEnhancer)
GenerateExtensionCandidates()
library(ReferenceEnhancer)
GenerateExtensionCandidates()
library(ReferenceEnhancer)
GenerateExtensionCandidates()
library(ReferenceEnhancer)
GenerateExtensionCandidates()
library(ReferenceEnhancer)
genome_annotation <- LoadGtf(unoptimized_annotation_path = "test_genes.gtf")
gene_overlaps <- IdentifyOverlappers(genome_annotation = genome_annotation)
OverlapResolutions(genome_annotation = genome_annotation, overlap_data = gene_overlaps, gene_pattern = c("Rik$", "^Gm"))
IsolateIntergenicReads(bam_file_name = "test_bam.bam", index_file_name = "test_index.bam.bai", barcode_length = 26)
GenerateGeneLocationBed(genome_annotation = genome_annotation)
GenerateExtensionCandidates()
library(ReferenceEnhancer)
GenerateExtensionCandidates(bedtools_loc = "/opt/bedtools2/bin")
Sys.getenv("PATH")
system("whereis bedtools")
system("whereis bedtools")
system("whereis bedtools") == None
system("whereis bedtools") == []
if(system("whereis bedtools")){print("YAY")}
if(system("whereis bedtools")){print("YAY")}else{"NO"}
library(ReferenceEnhancer)
GenerateExtensionCandidates()
Sys.getenv("PATH")
GenerateExtensionCandidates()
Sys.getenv("PATH")
system("whereis bedtools")
GenerateExtensionCandidates()
Sys.getenv("PATH")
system("whereis bedtools")
system("whereis bedtools")
a=system("whereis bedtools")
class(a)
a
a
a=system(print "homo")
a=system("homo")
a=system(""homo"")
a=system("print homo")
a=system("print 'homo'")
a=system("echo homo")
a
system("echo homo")[1]
a=system("echo homo")[1]
a
class(system("echo homo"))
as.character((system("echo homo"))
)
row.names((system("echo homo")))
row.names(system("whereis bedtools"))
a=row.names(system("whereis bedtools"))
dim(a)
class(a)
a
row.names(system("whereis bedtools"))
system("whereis bedtools")
unlist(strsplit(system("whereis bedtools", intern = TRUE),":"))[2]
unlist(strsplit(system("whereis bedtools", intern = TRUE),": "))[2]
library(ReferenceEnhancer)
GenerateExtensionCandidates()
system("whereis bedtools")
Sys.getenv("PATH")
system("whereis bedtools", intern = TRUE)
if(system("whereis bedtools", intern = TRUE)){print("YAY")}
length(system("whereis bedtools"))
length(system("whereis bedtools", intern = TRUE))
length(system("whereis bedtools"))
length(system("whereis bedtools", intern = TRUE))
unlist(strsplit(system("whereis bedtools", intern = TRUE),": "))[2]
if(unlist(strsplit(system("whereis bedtools", intern = TRUE),": "))[2]){print("YAY")}
if(is.na(unlist(strsplit(system("whereis bedtools", intern = TRUE),": "))[2])){print("OHNO")}
if(is.na(unlist(strsplit(system("whereis bedtools", intern = TRUE),": "))[2])){
print("Didn't find bedtools. Please install bedtools.")
}
else{
if(is.na(unlist(strsplit(system("whereis bedtools", intern = TRUE),": "))[2])){
print("Didn't find bedtools. Please install bedtools.")
}
else{
library(ReferenceEnhancer)
GenerateExtensionCandidates()
library(ReferenceEnhancer)
GenerateExtensionCandidates()
Sys.getenv("PATH")
GenerateExtensionCandidates()
Sys.getenv("PATH")
system("whereis bedtools")
system("whereis bedtools")
Sys.getenv("PATH")
library(ReferenceEnhancer)
Sys.getenv("PATH")
GenerateExtensionCandidates()
old_path <- Sys.getenv("PATH")
bedtools_loc = "/Users/helen/Downloads/bedtools2/bin"
Sys.setenv(PATH = paste(old_path, bedtools_loc, sep = ":"))
Sys.getenv("PATH")
GenerateExtensionCandidates()
?GenerateExtensionCandidates
library(ReferenceEnhancer)
GenerateExtensionCandidates()
library(ReferenceEnhancer)
GenerateExtensionCandidates()
GenerateExtensionCandidates(bedtools_loc = "/opt/bedtools2/bin")
library(ReferenceEnhancer)
library(ReferenceEnhancer)
GenerateExtensionCandidates()
library(ReferenceEnhancer)
GenerateExtensionCandidates()
GenerateExtensionCandidates("/Users/helen/Downloads/bedtools2/bin")
?GenerateGeneLocationBed
system("whereis bedops")
bedops in Sys.getenv("PATH")
system.file(bedops)
a = Sys.getenv("PATH", intern = TRUE)
a = intern = Sys.getenv("PATH")
a = Sys.getenv("PATH")
a
bedops in a
class(a)
grepl( needle, haystack, fixed = TRUE)
grepl(a, "bedops", fixed = TRUE)
a
grepl(a, "bedtools", fixed = TRUE)
grepl(a, "bedtools")
type(a)
class(a)
[1]
length(a)
length(a[1])
unlist(strsplit(a,sep=":"))
a
dim(a)
?Sys.getenv
Sys.getenv(c("R_HOME", "R_PAPERSIZE", "R_PRINTCMD", "HOST"))
dim(Sys.getenv(c("R_HOME", "R_PAPERSIZE", "R_PRINTCMD", "HOST")))
class(Sys.getenv(c("R_HOME", "R_PAPERSIZE", "R_PRINTCMD", "HOST")))
s <- Sys.getenv()
s
names(s)
head(s, 12)
a = Sys.getenv("PATH")
names(a)
head(s, 12)
head(s, 1)
s
head(s, 1)
head(s, 1)[1]
head(s, Path)
Sys.getenv("PATH")
Sys.getenv("PATH")
system("whereis bedops")
library(ReferenceEnhancer)
GenerateGeneLocationBed()
?GenerateGeneLocationBed
genome_annotation <- LoadGtf(unoptimized_annotation_path = "test_genes.gtf")
GenerateGeneLocationBed(genome_annotation)
Sys.getenv("PATH")
library(ReferenceEnhancer)
GenerateGeneLocationBed(genome_annotation)
library(ReferenceEnhancer)
genome_annotation <- LoadGtf(unoptimized_annotation_path = "test_genes.gtf")
gene_overlaps <- IdentifyOverlappers(genome_annotation = genome_annotation)
OverlapResolutions(genome_annotation = genome_annotation, overlap_data = gene_overlaps, gene_pattern = c("Rik$", "^Gm"))
IsolateIntergenicReads(bam_file_name = "test_bam.bam", index_file_name = "test_index.bam.bai", barcode_length = 26)
GenerateGeneLocationBed(genome_annotation = genome_annotation, bedops_loc = NULL)
GenerateExtensionCandidates(bedtools_loc = NULL)
Sys.getenv("PATH")
library(ReferenceEnhancer)
GenerateExtensionCandidates(bedtools_loc = NULL)
library(ReferenceEnhancer)
GenerateExtensionCandidates()
GenerateExtensionCandidates(bedtools_loc = NULL)
library(ReferenceEnhancer)
genome_annotation <- LoadGtf(unoptimized_annotation_path = "test_genes.gtf")
gene_overlaps <- IdentifyOverlappers(genome_annotation = genome_annotation)
OverlapResolutions(genome_annotation = genome_annotation, overlap_data = gene_overlaps, gene_pattern = c("Rik$", "^Gm"))
IsolateIntergenicReads(bam_file_name = "test_bam.bam", index_file_name = "test_index.bam.bai", barcode_length = 26)
GenerateGeneLocationBed(genome_annotation = genome_annotation, bedops_loc = NULL)
GenerateGeneLocationBed(genome_annotation = genome_annotation)
GenerateExtensionCandidates(bedtools_loc = NULL)
library(ReferenceEnhancer)
library(ReferenceEnhancer)
genome_annotation <- LoadGtf(unoptimized_annotation_path = "test_genes.gtf")
gene_overlaps <- IdentifyOverlappers(genome_annotation = genome_annotation)
OverlapResolutions(genome_annotation = genome_annotation, overlap_data = gene_overlaps, gene_pattern = c("Rik$", "^Gm"))
IsolateIntergenicReads(bam_file_name = "test_bam.bam", index_file_name = "test_index.bam.bai", barcode_length = 26)
GenerateGeneLocationBed(genome_annotation = genome_annotation, bedops_loc = NULL)
GenerateExtensionCandidates(bedtools_loc = NULL)
GenerateExtensionCandidates(bedtools_loc = "/Users/helen/Downloads/bedtools2/bin")
