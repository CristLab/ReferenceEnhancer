summary_data = read.table("results.txt", sep = "\t")
summary_data = summary_data[summary_data$V23>-10000,]
summary_data = summary_data[summary_data$V23<0,]
hist(summary_data$V23)
summary_data_genes = table(summary_data$V22)
o = order(summary_data_genes, decreasing = TRUE)
length(summary_data_genes)
summary_data_genes = summary_data_genes[o]
length(summary_data_genes[summary_data_genes>10]) # Determine number of genes with more than 10 intergenic reads within 10kb of known gene end
summary_data_genes = summary_data_genes[summary_data_genes>10] # Threshold gene list based on the amount of intergenic gene loading.
summary_data_genes = data.frame(summary_data_genes)
dim(summary_data_genes)
summary_data_genes[1:40,]
summary_data_genes
library(ReferenceEnhancer)
GenerateExtensionCandidates()
PremrnaAnnotationGenerator(genome_annotation)
library(ReferenceEnhancer)
library(ReferenceEnhancer)
library(ReferenceEnhancer)
library(ReferenceEnhancer)
system.file(".")
library(ReferenceEnhancer)
ls()
getwd()
ls()
system.file("extdata", "test_genes.gtf", package = "ReferenceEnhancer")
system.file(package = "ReferenceEnhancer")
wd()
getwd()
test = read.table("./results.txt", sep = "\t")
test
file.choose()
library(ReferenceEnhancer)
library(ReferenceEnhancer)
genome_annotation <- LoadGtf("test_genes.gtf")
gene_overlaps <- IdentifyOverlappers(genome_annotation)
OverlapResolutions(genome_annotation, gene_overlaps)
IsolateIntergenicReads("test_bam.bam", "test_index.bam.bai")
GenerateGeneLocationBed(genome_annotation)
GenerateExtensionCandidates()
PremrnaAnnotationGenerator(genome_annotation)
exists(genome_annotation)
exists('genome_annotation')
library(ReferenceEnhancer)
genome_annotation <- LoadGtf("test_genes.gtf")
gene_overlaps <- IdentifyOverlappers(genome_annotation)
OverlapResolutions(genome_annotation, gene_overlaps)
IsolateIntergenicReads("test_bam.bam", "test_index.bam.bai")
GenerateGeneLocationBed(genome_annotation)
GenerateExtensionCandidates()
PremrnaAnnotationGenerator(genome_annotation)
OptimizedAnnotationAssembler("test_genes.gtf", "premrna.gtf", "overlapping_genes.csv", "gene_extension.csv", "gene_replacement.csv")
OptimizedAnnotationAssembler("test_genes.gtf", "premrna.gtf", "overlapping_genes_list.csv", "gene_extension.csv", "gene_replacement.csv")
OptimizedAnnotationAssembler("test_genes.gtf", "premrna.gtf", "overlapping_gene_list.csv", "gene_extension.csv", "gene_replacement.csv")
OptimizedAnnotationAssembler("test_genes.gtf", "premrna.gtf", "overlapping_gene_list.csv", "gene_extension_candidates.csv", "gene_replacement.csv")
library(ReferenceEnhancer)
OptimizedAnnotationAssembler("test_genes.gtf", "premrna.gtf", "overlapping_gene_list.csv", "gene_extension_candidates.csv", "gene_replacement.csv")
library(ReferenceEnhancer)
OptimizedAnnotationAssembler("test_genes.gtf", "premrna.gtf", "overlapping_gene_list.csv", "gene_extension_candidates.csv", "gene_replacement.csv")
library(ReferenceEnhancer)
library(ReferenceEnhancer)
OptimizedAnnotationAssembler("test_genes.gtf", "premrna.gtf", "overlapping_gene_list.csv", "gene_extension_candidates.csv", "gene_replacement.csv")
library(ReferenceEnhancer)
OptimizedAnnotationAssembler("test_genes.gtf", "premrna.gtf", "overlapping_gene_list.csv", "gene_extension_candidates.csv", "gene_replacement.csv")
library(ReferenceEnhancer)
OptimizedAnnotationAssembler("test_genes.gtf", "premrna.gtf", "overlapping_gene_list.csv", "gene_extension_candidates.csv", "gene_replacement.csv")
library(ReferenceEnhancer)
library(ReferenceEnhancer)
GenerateExtensionCandidates()
OptimizedAnnotationAssembler("test_genes.gtf", "premrna.gtf", "overlapping_gene_list.csv", "gene_extension_candidates.csv", "gene_replacement.csv")
library(ReferenceEnhancer)
OptimizedAnnotationAssembler("test_genes.gtf", "premrna.gtf", "overlapping_gene_list.csv", "gene_extension_candidates.csv", "gene_replacement.csv")
library(ReferenceEnhancer)
OptimizedAnnotationAssembler("test_genes.gtf", "premrna.gtf", "overlapping_gene_list.csv", "gene_extension_candidates.csv", "gene_replacement.csv")
library(ReferenceEnhancer)
OptimizedAnnotationAssembler("test_genes.gtf", "premrna.gtf", "overlapping_gene_list.csv", "gene_extension_candidates.csv", "gene_replacement.csv")
library(ReferenceEnhancer)
OptimizedAnnotationAssembler("test_genes.gtf", "premrna.gtf", "overlapping_gene_list.csv", "gene_extension_candidates.csv", "gene_replacement.csv")
integer(0)
library(ReferenceEnhancer)
OptimizedAnnotationAssembler("test_genes.gtf", "premrna.gtf", "overlapping_gene_list.csv", "gene_extension_candidates.csv", "gene_replacement.csv")
library(ReferenceEnhancer)
OptimizedAnnotationAssembler("test_genes.gtf", "premrna.gtf", "overlapping_gene_list.csv", "gene_extension_candidates.csv", "gene_replacement.csv")
library(ReferenceEnhancer)
OptimizedAnnotationAssembler("test_genes.gtf", "premrna.gtf", "overlapping_gene_list.csv", "gene_extension_candidates.csv", "gene_replacement.csv")
OptimizedAnnotationAssembler("test_genes.gtf", "premrna.gtf", "overlapping_gene_list.csv", "gene_extension_candidates.csv")
library(ReferenceEnhancer)
OptimizedAnnotationAssembler("test_genes.gtf", "premrna.gtf", "overlapping_gene_list.csv", "gene_extension_candidates.csv")
makeGRangesFromDataFrame()
library(ReferenceEnhancer)
OptimizedAnnotationAssembler("test_genes.gtf", "premrna.gtf", "overlapping_gene_list.csv", "gene_extension_candidates.csv")
library(ReferenceEnhancer)
OptimizedAnnotationAssembler("test_genes.gtf", "premrna.gtf", "overlapping_gene_list.csv", "gene_extension_candidates.csv")
library(ReferenceEnhancer)
OptimizedAnnotationAssembler("test_genes.gtf", "premrna.gtf", "overlapping_gene_list.csv", "gene_extension_candidates.csv")
library(ReferenceEnhancer)
library(ReferenceEnhancer)
OptimizedAnnotationAssembler("test_genes.gtf", "premrna.gtf", "overlapping_gene_list.csv", "gene_extension_candidates.csv", "gene_replacement.csv")
library(ReferenceEnhancer)
OptimizedAnnotationAssembler("test_genes.gtf", "premrna.gtf", "overlapping_gene_list.csv", "gene_extension_candidates.csv", "gene_replacement.csv")
library(ReferenceEnhancer)
OptimizedAnnotationAssembler("test_genes.gtf", "premrna.gtf", "overlapping_gene_list.csv", "gene_extension_candidates.csv", "gene_replacement.csv")
OptimizedAnnotationAssembler("test_genes.gtf", "premrna.gtf", "overlapping_gene_list.csv", "gene_extension_candidates.csv", “test_gene_replacement.csv")
OptimizedAnnotationAssembler("test_genes.gtf", "premrna.gtf", "overlapping_gene_list.csv", "gene_extension_candidates.csv", "test_gene_replacement.csv")
library(ReferenceEnhancer)
OptimizedAnnotationAssembler("test_genes.gtf", "premrna.gtf", "overlapping_gene_list.csv", "gene_extension_candidates.csv", "test_gene_replacement.csv")
library(ReferenceEnhancer)
OptimizedAnnotationAssembler("test_genes.gtf", "premrna.gtf", "overlapping_gene_list.csv", "gene_extension_candidates.csv", "test_gene_replacement.csv")
library(ReferenceEnhancer)
OptimizedAnnotationAssembler("test_genes.gtf", "premrna.gtf", "overlapping_gene_list.csv", "gene_extension_candidates.csv", "test_gene_replacement.csv")
library(ReferenceEnhancer)
OptimizedAnnotationAssembler("test_genes.gtf", "premrna.gtf", "overlapping_gene_list.csv", "gene_extension_candidates.csv", "test_gene_replacement.csv")
library(ReferenceEnhancer)
OptimizedAnnotationAssembler("test_genes.gtf", "premrna.gtf", "overlapping_gene_list.csv", "gene_extension_candidates.csv", "test_gene_replacement.csv")
library(ReferenceEnhancer)
OptimizedAnnotationAssembler("test_genes.gtf", "premrna.gtf", "overlapping_gene_list.csv", "gene_extension_candidates.csv", "test_gene_replacement.csv")
library(ReferenceEnhancer)
OptimizedAnnotationAssembler("test_genes.gtf", "premrna.gtf", "overlapping_gene_list.csv", "gene_extension_candidates.csv", "test_gene_replacement.csv")
library(ReferenceEnhancer)
OptimizedAnnotationAssembler("test_genes.gtf", "premrna.gtf", "overlapping_gene_list.csv", "gene_extension_candidates.csv", "test_gene_replacement.csv")
library(ReferenceEnhancer)
library(devtools)
install_github("PoolLab")
install_github("PoolLab/ReferenceEnhancer")
install_github("PoolLab/ReferenceEnhancer")
install_github("PoolLab")
library(ReferenceEnhancer)
use_github(protocol = "https")
library(usethis)
use_github(protocol = "https")
gh_token_help()
create_github_token()
gitcreds::gitcreds_set()
use_github(protocol = "https")
use_github(protocol = "https")
library(ReferenceEnhancer)
genome_annotation <- LoadGtf("/Users/helen/Library/CloudStorage/OneDrive-Personal/Koostoo_Hallu/Gene_Classification_Package/genes.gtf")
getwd()
setwd("/Users/helen/Library/CloudStorage/OneDrive-Personal/Koostoo_Hallu")
getwd()
gene_overlaps <- IdentifyOverlappers(genome_annotation)
devtools::document()
devtools::check()
library(ReferenceEnhancer)
gene_overlaps <- IdentifyOverlappers(genome_annotation)
library(ReferenceEnhancer)
genome_annotation <- LoadGtf("test_genes.gtf")
setwd("/Users/helen/Library/CloudStorage/OneDrive-Personal/Koostoo_Hallu")
gene_overlaps <- IdentifyOverlappers(genome_annotation)
genome_annotation <- LoadGtf("/Users/helen/Library/CloudStorage/OneDrive-Personal/Koostoo_Hallu/Gene_Classification_Package/genes.gtf")
gene_overlaps <- IdentifyOverlappers(genome_annotation)
OverlapResolutions(genome_annotation, gene_overlaps)
getwd()
head(overlap_data)
head(gene_overlaps)
overlap_data = gene_overlaps
head(genome_annotation)
gene_list <- unique(overlap_data$gene)
gene_address <- rep(0, length(gene_list))
i
length(gene_list)
i = 1894
gene_address[i]
gene_list[i]
for (i in 1:length(gene_list)){
gene_address[i] <- which(overlap_data$gene==gene_list[i])[1]
}
overlap_data <- overlap_data[gene_address,]
rownames(overlap_data) <- overlap_data[,'gene']
overlap_data['automatic_classification'] <- NA
head(rownames(overlap_data))
rownames(overlap_data)
key = "Pbx2"
gene_A <- subset(genome_annotation, gene_name == key)
gene_A
(is.na(overlap_data[key,'automatic_classification']))
overlap_data[key,'number_of_gene_overlaps'] > 1)
overlap_data[key,'number_of_gene_overlaps'] > 1
overlap_data[key,'number_of_gene_overlaps'] == 1
overlapping <- overlap_data[key,'overlapping_genes'][[1]]
overlapping
gene_B <- subset(genome_annotation, gene_name == overlapping)
gene_B
strand <- gene_A[1,'strand']
strand
gene_A_exons = return_exons(gene_A)
return_exons <- function(gene_name){
exon_subset <- subset(gene_name, type == 'exon')
return(data.frame(exon_subset['start'], exon_subset['end']))
}
gene_A_exons = return_exons(gene_A)
gene_B_exons = return_exons(gene_B)
both_pseudo <- function(key, overlapping){
return((stringr::str_sub(key, 1, 2) == 'Gm' | stringr::str_sub(key, - 3, - 1) == 'Rik') & (stringr::str_sub(overlapping, 1, 2) == 'Gm' | stringr::str_sub(overlapping, - 3, - 1) == 'Rik'))
}
both_pseudo(key, overlapping)
both_pseudo(key, overlapping) == TRUE
pseudo_overlap <- function(key, overlapping, gene_A_exons, gene_B_exons){
# Check for exon overlap
if(stringr::str_sub(key, 1, 2) == 'Gm' | stringr::str_sub(key, - 3, - 1) == 'Rik' | stringr::str_sub(overlapping, 1, 2) == 'Gm' | stringr::str_sub(overlapping, - 3, - 1) == 'Rik'){
if(exon_overlap(gene_A_exons, gene_B_exons) == TRUE){
# Check if gene_A is a pseudogene
if(stringr::str_sub(key, 1, 2) == 'Gm' | stringr::str_sub(key, - 3, - 1) == 'Rik'){
return(key)
}
else{
return(overlapping)
}
}
else{
return('exonic')
}
}
else{
return('empty')
}
}
pseudo_overlap(key, overlapping, gene_A_exons, gene_B_exons) == key
pseudo_overlap(key, overlapping, gene_A_exons, gene_B_exons)
exon_overlap <- function(gene_A_exons, gene_B_exons){
#print(gene_A_exons)
#print(dim(gene_B_exons)[1])
if(dim(gene_A_exons)[1] | dim(gene_B_exons)[1]){
return (FALSE)
}
for(row_exonA in 1:nrow(gene_A_exons)){
for(row_exonB in 1:nrow(gene_B_exons)){
x = seq(from = gene_A_exons[row_exonA,1], to = gene_A_exons[row_exonA,2]-1, by = 1)
y = seq(from = gene_B_exons[row_exonB,1], to = gene_B_exons[row_exonB,2]-1, by = 1)
if(length(intersect(x,y))!=0){
return (TRUE)
}
}
}
return (FALSE)
}
exon_overlap(gene_A_exons, gene_B_exons)
strand
exon_overlap(gene_A_exons, gene_B_exons)
gene_A_exons
gene_B_exons
dim(gene_A_exons)[1] | dim(gene_B_exons)[1]
dim(gene_A_exons)[1]
gene_B_exons)[1]
dim(gene_B_exons)[1])
dim(gene_B_exons)[1]
proov = dataframe()
proov = data.frame()
dim(proov)
gene_B_exons
dim(gene_B_exons)
setwd("/Users/helen/Library/CloudStorage/OneDrive-Personal/Koostoo_Hallu")
library(ReferenceEnhancer)
genome_annotation <- LoadGtf("/Users/helen/Library/CloudStorage/OneDrive-Personal/Koostoo_Hallu/Gene_Classification_Package/genes.gtf")
gene_overlaps <- IdentifyOverlappers(genome_annotation)
gene_overlaps <- IdentifyOverlappers(genome_annotation)
OverlapResolutions(genome_annotation, gene_overlaps)
grep("char", x)
grepl("char", x)
x <- c("d", "a", "c", "abba")
grep("a", x)
grep("a"*, x)
grep("a*", x)
grep("a|c", x)
x
gene_pattern = c("*Rik", "Gm*")
gene_pattern
gene_pattern = c("*Rik", "Gm*", "*LOL")
gene_pattern
i in gene_pattern){print(i)}
for (i in gene_pattern){print(i)}
i
i[1]
i[1][1]
str_starts(i, "*")
library(stringr)
str_starts(i, "*")
?str_starts
str_starts("*LOL", "*")
fruit <- c("apple", "banana", "pear", "pineapple")
str_starts(fruit, "p")
gene_pattern = c("*Rik", "Gm*", "*LOL")
grep("*", gene_pattern)
grep("^*", gene_pattern)
substr(gene_pattern, 1, 1) == '*'
pattern_start = substr(gene_pattern, 1, 1) == '*'
substr(gene_pattern, -1) == '*'
substr(gene_pattern, -1,-1) == '*'
substr(gene_pattern, -2,-1) == '*'
substr(gene_pattern, start = -1) == '*'
str_sub(gene_pattern, 1, 1) == '*'
pattern_start = str_sub(gene_pattern, 1, 1) == '*'
str_sub(gene_pattern, -1) == '*'
pattern_end = stringr::str_sub(gene_pattern, -1) == '*'
str_sub(gene_pattern, 1) == '*'
pattern_start
pattern_end
pattern_end = stringr::str_sub(gene_pattern, 1, 1) == '*'
pattern_start = stringr::str_sub(gene_pattern, -1) == '*'
pattern_start
gene_pattern[pattern_start]
pattern_start = gene_pattern[stringr::str_sub(gene_pattern, -1) == '*']
pattern_end = gene_pattern[stringr::str_sub(gene_pattern, 1, 1) == '*']
pattern_start
pattern_end
str_sub(pattern_end, 1,1)
str_sub(pattern_end, 2)
str_sub(pattern_start, 1,-1)
str_sub(pattern_start, 1,-2)
gene_pattern = c("*Rik", "Gm*", "*LOL", "NOLOL*")
pattern_start = gene_pattern[stringr::str_sub(gene_pattern, -1) == '*']
pattern_end = gene_pattern[stringr::str_sub(gene_pattern, 1, 1) == '*']
pattern_start = str_sub(pattern_start, 1,-2)
pattern_end = str_sub(pattern_end, 2)
pattern_start
pattern_end
length(pattern_start)
for(i in pattern_start){print(i)}
pattern_start
pattern_end
?str_detect
key
overlapping
fruit <- c("apple", "banana", "pear", "pineapple")
pattern_start
str_detect("aecfg", letters)
str_detect(pattern_start, ^key)
str_detect(pattern_start, "^key")
str_detect(pattern_start, key)
key1 = "aaaRikaaa"
str_detect(pattern_start, key1)
str_detect(pattern_end, key1)
pattern_end
key1
str_detect(pattern_end, key1)
pattern_end = c(str_sub(pattern_end, 2))
pattern_end
pattern_start = gene_pattern[stringr::str_sub(gene_pattern, -1) == '*']
pattern_end = gene_pattern[stringr::str_sub(gene_pattern, 1, 1) == '*']
pattern_end = c(str_sub(pattern_end, 2))
pattern_end
str_detect(pattern_end, key1)
pattern_start
pattern_start = gene_pattern[stringr::str_sub(gene_pattern, -1) == '*']
pattern_end = gene_pattern[stringr::str_sub(gene_pattern, 1, 1) == '*']
pattern_start = str_sub(pattern_start, 1,-2)
pattern_end = c(str_sub(pattern_end, 2))
pattern_start
key
overlapping
str_detect(key, "a")
pattern_start
str_detect(key, pattern_start)
pattern_start
pattern_start=c("^Gm", "^NOLOL")
str_detect(key, pattern_start)
key
key2 = c("Gmhytyty")
str_detect(key, pattern_start)
str_detect(key2, pattern_start)
sum(str_detect(key2, pattern_start))
gene_pattern = c("Rik$", "^Gm", "LOL$", "^NOLOL")
key_pseudo = sum(stringr::str_detect(key, gene_pattern))
key_pseudo
key2
sum(stringr::str_detect(key2, gene_pattern))
return(TRUE | FALSE)
key_pseudo = sum(stringr::str_detect(key2, gene_pattern))
overlapping_pseudo = sum(stringr::str_detect(overlapping, gene_pattern))
key_pseudo > 0 | overlapping_pseudo > 0)
key_pseudo > 0 | overlapping_pseudo > 0
(key_pseudo + overlapping_pseudo) > 1
setwd("/Users/helen/Library/CloudStorage/OneDrive-Personal/Koostoo_Hallu")
library(ReferenceEnhancer)
genome_annotation <- LoadGtf("/Volumes/ALLAN_MEMO/genes.gtf")
gene_overlaps <- IdentifyOverlappers(genome_annotation)
setwd("/Users/helen/Library/CloudStorage/OneDrive-Personal/Koostoo_Hallu")
library(ReferenceEnhancer)
genome_annotation <- LoadGtf("/Volumes/ALLAN_MEMO/genes.gtf")
gene_overlaps <- IdentifyOverlappers(genome_annotation)
OverlapResolutions(genome_annotation, gene_overlaps, c("Rik$", "^Gm"))
IsolateIntergenicReads("test_bam.bam", "test_index.bam.bai")
Sys.getenv("PATH")
setwd("/Users/helen/Library/CloudStorage/OneDrive-Personal/Koostoo_Hallu")
library(ReferenceEnhancer)
genome_annotation <- LoadGtf("/Volumes/ALLAN_MEMO/mouse_short_genes.gtf")
gene_overlaps <- IdentifyOverlappers(genome_annotation)
OverlapResolutions(genome_annotation, gene_overlaps, c("Rik$", "^Gm"))
IsolateIntergenicReads("test_bam.bam", "test_index.bam.bai")
GenerateGeneLocationBed(genome_annotation)
library(ReferenceEnhancer)
setwd("/Users/helen/Library/CloudStorage/OneDrive-Personal/Koostoo_Hallu")
genome_annotation <- LoadGtf("/Volumes/ALLAN_MEMO/mouse_short_genes.gtf")
library(ReferenceEnhancer)
setwd("/Users/helen/Library/CloudStorage/OneDrive-Personal/Koostoo_Hallu")
genome_annotation <- LoadGtf("/Volumes/ALLAN_MEMO/mouse_short_genes.gtf")
gene_overlaps <- IdentifyOverlappers(genome_annotation)
OverlapResolutions(genome_annotation, gene_overlaps, c("Rik$", "^Gm"))
IsolateIntergenicReads("test_bam.bam", "test_index.bam.bai")
GenerateGeneLocationBed(genome_annotation)
library(ReferenceEnhancer)
library(ReferenceEnhancer)
setwd("/Users/helen/Library/CloudStorage/OneDrive-Personal/Koostoo_Hallu")
genome_annotation <- LoadGtf("/Volumes/ALLAN_MEMO/mouse_short_genes.gtf")
gene_overlaps <- IdentifyOverlappers(genome_annotation)
OverlapResolutions(genome_annotation, gene_overlaps, c("Rik$", "^Gm"))
IsolateIntergenicReads("test_bam.bam", "test_index.bam.bai")
GenerateGeneLocationBed(genome_annotation)
a = NULL
a
length(a)
a = ""
a
length(a)
library(ReferenceEnhancer)
library(ReferenceEnhancer)
setwd("/Users/helen/Library/CloudStorage/OneDrive-Personal/Koostoo_Hallu")
genome_annotation <- LoadGtf("/Volumes/ALLAN_MEMO/mouse_short_genes.gtf")
gene_overlaps <- IdentifyOverlappers(genome_annotation)
OverlapResolutions(genome_annotation, gene_overlaps, c("Rik$", "^Gm"))
IsolateIntergenicReads("test_bam.bam", "test_index.bam.bai")
GenerateGeneLocationBed(genome_annotation)
library(ReferenceEnhancer)
setwd("/Users/helen/Library/CloudStorage/OneDrive-Personal/Koostoo_Hallu")
genome_annotation <- LoadGtf("/Volumes/ALLAN_MEMO/mouse_short_genes.gtf")
gene_overlaps <- IdentifyOverlappers(genome_annotation)
OverlapResolutions(genome_annotation, gene_overlaps, c("Rik$", "^Gm"))
IsolateIntergenicReads("test_bam.bam", "test_index.bam.bai")
GenerateGeneLocationBed(genome_annotation)
GenerateExtensionCandidates()
usethis::use_package("gdata")
usethis::use_package("gdata")
setwd("/Users/helen/Library/CloudStorage/OneDrive-Personal/Koostoo_Hallu")
library(ReferenceEnhancer)
loadedNamespaces()
library(ReferenceEnhancer)
setwd("/Users/helen/Library/CloudStorage/OneDrive-Personal/Koostoo_Hallu")
genome_annotation <- LoadGtf("/Volumes/ALLAN_MEMO/mouse_short_genes.gtf")
gene_overlaps <- IdentifyOverlappers(genome_annotation)
OverlapResolutions(genome_annotation, gene_overlaps, c("Rik$", "^Gm"))
IsolateIntergenicReads("test_bam.bam", "test_index.bam.bai")
GenerateGeneLocationBed(genome_annotation)
GenerateExtensionCandidates()
PremrnaAnnotationGenerator(genome_annotation)
OptimizedAnnotationAssembler("test_genes.gtf", "overlapping_gene_list.csv", "gene_extension_candidates.csv", "test_gene_replacement.csv")
library(ReferenceEnhancer)
setwd("/Users/helen/Library/CloudStorage/OneDrive-Personal/Koostoo_Hallu")
genome_annotation <- LoadGtf("/Volumes/ALLAN_MEMO/mouse_short_genes.gtf")
gene_overlaps <- IdentifyOverlappers(genome_annotation)
OverlapResolutions(genome_annotation, gene_overlaps, c("Rik$", "^Gm"))
IsolateIntergenicReads("test_bam.bam", "test_index.bam.bai")
GenerateGeneLocationBed(genome_annotation)
GenerateExtensionCandidates()
OptimizedAnnotationAssembler("test_genes.gtf", "overlapping_gene_list.csv", "gene_extension_candidates.csv", "test_gene_replacement.csv")
library(ReferenceEnhancer)
setwd("/Users/helen/Library/CloudStorage/OneDrive-Personal/Koostoo_Hallu")
genome_annotation <- LoadGtf("/Volumes/ALLAN_MEMO/mouse_short_genes.gtf")
gene_overlaps <- IdentifyOverlappers(genome_annotation)
OverlapResolutions(genome_annotation, gene_overlaps, c("Rik$", "^Gm"))
IsolateIntergenicReads("test_bam.bam", "test_index.bam.bai")
GenerateGeneLocationBed(genome_annotation)
GenerateExtensionCandidates()
OptimizedAnnotationAssembler("genes.gtf", "overlapping_gene_list.csv", "gene_extension_candidates.csv”, "rename_genes.csv")
OptimizedAnnotationAssembler("genes.gtf", "overlapping_gene_list.csv", "gene_extension_candidates.csv", "rename_genes.csv")
OptimizedAnnotationAssembler("mouse_short_genes.gtf", "overlapping_gene_list.csv", "gene_extension_candidates.csv”, "rename_genes.csv")
OptimizedAnnotationAssembler("mouse_short_genes.gtf", "overlapping_gene_list.csv", "gene_extension_candidates.csv", "rename_genes.csv")
library(ReferenceEnhancer)
setwd("/Users/helen/Library/CloudStorage/OneDrive-Personal/Koostoo_Hallu")
genome_annotation <- LoadGtf("/Volumes/ALLAN_MEMO/mouse_short_genes.gtf")
genome_annotation <- LoadGtf("mouse_short_genes.gtf")
gene_overlaps <- IdentifyOverlappers(genome_annotation)
OverlapResolutions(genome_annotation, gene_overlaps, c("Rik$", "^Gm"))
IsolateIntergenicReads("test_bam.bam", "test_index.bam.bai")
GenerateGeneLocationBed(genome_annotation)
GenerateExtensionCandidates()
OptimizedAnnotationAssembler("mouse_short_genes.gtf", "overlapping_gene_list.csv", "gene_extension_candidates.csv", "rename_genes.csv")
OptimizedAnnotationAssembler("mouse_short_genes.gtf", "overlapping_gene_list.csv", "gene_extension_candidates.csv", "rename_genes.csv")
library(ReferenceEnhancer)
library(ReferenceEnhancer)
library(ReferenceEnhancer)
setwd("/Users/helen/Library/CloudStorage/OneDrive-Personal/Koostoo_Hallu")
genome_annotation <- LoadGtf("test_genes.gtf")
gene_overlaps <- IdentifyOverlappers(genome_annotation)
OverlapResolutions(genome_annotation, gene_overlaps, c("Rik$", "^Gm"))
IsolateIntergenicReads("test_bam.bam", "test_index.bam.bai")
GenerateGeneLocationBed(genome_annotation)
GenerateExtensionCandidates()
OptimizedAnnotationAssembler("test_genes.gtf", "overlapping_gene_list.csv", "gene_extension_candidates.csv", "test_gene_replacement.csv")
OptimizedAnnotationAssembler("test_genes.gtf", "/Users/helen/Downloads/overlapping_gene_list.csv", "gene_extension_candidates.csv", "test_gene_replacement.csv")
library(ReferenceEnhancer)
setwd("/Users/helen/Library/CloudStorage/OneDrive-Personal/Koostoo_Hallu")
genome_annotation <- LoadGtf("test_genes.gtf")
gene_overlaps <- IdentifyOverlappers(genome_annotation)
OverlapResolutions(genome_annotation, gene_overlaps, c("Rik$", "^Gm"))
IsolateIntergenicReads("test_bam.bam", "test_index.bam.bai")
GenerateGeneLocationBed(genome_annotation)
GenerateExtensionCandidates()
OptimizedAnnotationAssembler("test_genes.gtf", "test_overlapping_gene_list.csv", "gene_extension_candidates.csv", "test_gene_replacement.csv")
OptimizedAnnotationAssembler("test_genes.gtf", "test_overlapping_gene_list.csv", "gene_extension_candidates.csv", "test_gene_replacement.csv")
library(ReferenceEnhancer)
setwd("/Users/helen/Library/CloudStorage/OneDrive-Personal/Koostoo_Hallu")
genome_annotation <- LoadGtf("test_genes.gtf")
gene_overlaps <- IdentifyOverlappers(genome_annotation)
OverlapResolutions(genome_annotation, gene_overlaps, c("Rik$", "^Gm"))
IsolateIntergenicReads("test_bam.bam", "test_index.bam.bai")
GenerateGeneLocationBed(genome_annotation)
GenerateExtensionCandidates()
OptimizedAnnotationAssembler("test_genes.gtf", “test_overlapping_gene_list.csv", "gene_extension_candidates.csv", "test_gene_replacement.csv")
OptimizedAnnotationAssembler("test_genes.gtf", "test_overlapping_gene_list.csv", "gene_extension_candidates.csv", "test_gene_replacement.csv")
git push
git config pull.ff only
